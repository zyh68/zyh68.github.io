<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://blog.zyh.info</id>
    <title>学习笔记</title>
    <updated>2023-05-13T23:54:35.709Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://blog.zyh.info"/>
    <link rel="self" href="https://blog.zyh.info/atom.xml"/>
    <subtitle>记录学习笔记，备忘录，内容收集整理来源于网络... ...</subtitle>
    <logo>https://blog.zyh.info/images/avatar.png</logo>
    <icon>https://blog.zyh.info/favicon.ico</icon>
    <rights>All rights reserved 2023, 学习笔记</rights>
    <entry>
        <title type="html"><![CDATA[用 Docker 部署 WordPress]]></title>
        <id>https://blog.zyh.info/post/yong-docker-bu-shu-wordpress/</id>
        <link href="https://blog.zyh.info/post/yong-docker-bu-shu-wordpress/">
        </link>
        <updated>2023-04-19T03:29:55.000Z</updated>
        <content type="html"><![CDATA[<p>要在 ARM64 架构上使用 Docker 部署 WordPress，您需要按照以下步骤进行操作：</p>
<p>安装 Docker 和 Docker Compose。您可以在 Docker 官网上下载并安装 Docker，Docker Compose 通常会随 Docker 一起安装。</p>
<p>创建一个新的目录，用于存储 WordPress 和 MySQL 的 Docker 配置文件。</p>
<p>在该目录中创建一个名为 docker-compose.yml 的文件，并将以下内容复制要在 ARM64 架构上使用 Docker 部署 WordPress，您可以按照以下步骤进行操作：</p>
<p>安装 Docker 和 Docker Compose。您可以在 Docker 官网上下载并安装 Docker，Docker Compose 通常会随 Docker 一起安装。</p>
<p>创建一个新的目录，用于存储 WordPress 和 MySQL 的 Docker 配置文件。</p>
<p>在该目录中创建一个名为 docker-compose.yml 的文件，并将以下内容复制到该文件中：</p>
<p>version: '3'</p>
<p>services:<br>
db:<br>
image: mysql:latest<br>
volumes:<br>
- db_data:/var/lib/mysql<br>
restart: always<br>
environment:<br>
MYSQL_ROOT_PASSWORD: your_mysql_root_password<br>
MYSQL_DATABASE: your_mysql_database_name<br>
MYSQL_USER: your_mysql_user<br>
MYSQL_PASSWORD: your_mysql_password</p>
<p>wordpress:<br>
depends_on:<br>
- db<br>
image: wordpress:latest<br>
ports:<br>
- &quot;8000:80&quot;<br>
restart: always<br>
environment:<br>
WORDPRESS_DB_HOST: db:3306<br>
WORDPRESS_DB_USER: your_mysql_user<br>
WORDPRESS_DB_PASSWORD: your_mysql_password<br>
WORDPRESS_DB_NAME: your_mysql_database_name<br>
volumes:<br>
db_data:<br>
在上面的配置文件中，将 your_mysql_root_password、your_mysql_database_name、your_mysql_user 和 your_mysql_password 替换为您自己的 MySQL 根密码、数据库名称、用户名和密码。</p>
<p>在终端中进入该目录，并运行以下命令以启动 Docker 容器：</p>
<p>docker-compose up -d<br>
等待 Docker 容器启动完成后，您可以在浏览器中访问 http://localhost:8000 来访问 WordPress 站点。</p>
<p>如果您想将 WordPress 和 MySQL 的数据映射到本机目录，而不是存储在 Docker 容器中，您可以按照以下步骤进行操作：</p>
<p>在本机上创建一个目录，用于存储 WordPress 和 MySQL 的数据。例如，您可以在本机上创建一个名为 wordpress_data 的目录。</p>
<p>在 docker-compose.yml 文件中，将 WordPress 和 MySQL 的数据卷映射到本机目录。例如，您可以将以下内容添加到 docker-compose.yml 文件中：</p>
<p>version: '3'</p>
<p>services:<br>
db:<br>
image: mysql:latest<br>
volumes:<br>
- ./mysql_data:/var/lib/mysql<br>
restart: always<br>
environment:<br>
MYSQL_ROOT_PASSWORD: your_mysql_root_password<br>
MYSQL_DATABASE: your_mysql_database_name<br>
MYSQL_USER: your_mysql_user<br>
MYSQL_PASSWORD: your_mysql_password</p>
<p>wordpress:<br>
depends_on:<br>
- db<br>
image: wordpress:latest<br>
ports:<br>
- &quot;8000:80&quot;<br>
restart: always<br>
environment:<br>
WORDPRESS_DB_HOST: db:3306<br>
WORDPRESS_DB_USER: your_mysql_user<br>
WORDPRESS_DB_PASSWORD: your_mysql_password<br>
WORDPRESS_DB_NAME: your_mysql_database_name<br>
volumes:<br>
- ./wordpress_data:/var/www/html<br>
volumes:<br>
mysql_data:<br>
wordpress_data:<br>
在上面的配置文件中，./mysql_data 和 ./wordpress_data 分别是本机上存储 MySQL 和 WordPress 数据的目录。这些目录将映射到 Docker 容器中的 /var/lib/mysql 和 /var/www/html 目录。</p>
<p>在终端中进入包含 docker-compose.yml 文件的目录，并运行以下命令以启动 Docker 容器：<br>
docker-compose up -d<br>
现在，WordPress 和 MySQL 的数据将存储在本机目录中，而不是存储在 Docker 容器中。如果您需要备份或恢复数据，只需备份或恢复本机目录即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[-bash: ./start.sh: /bin/sh^M: 坏的解释器: 没有那个文件或目录]]></title>
        <id>https://blog.zyh.info/post/-bash-startsh-binshm-pi-de-jie-shi-qi-mei-you-na-ge-wen-jian-huo-mu-lu/</id>
        <link href="https://blog.zyh.info/post/-bash-startsh-binshm-pi-de-jie-shi-qi-mei-you-na-ge-wen-jian-huo-mu-lu/">
        </link>
        <updated>2023-04-12T04:09:05.000Z</updated>
        <content type="html"><![CDATA[<p>这个错误通常是由于脚本文件的换行符格式不正确导致的。在Windows中，换行符是\r\n，而在Linux中，换行符是\n。当您在Windows上编写脚本并将其复制到Linux上时，可能会出现这个错误。</p>
<p>要解决这个问题，您可以使用文本编辑器将脚本的换行符从\r\n改为\n。</p>
<p>可以用sed命令进行全局替换<br>
sed 's/\r//' -i start.sh</p>
<p>也可以用 vim 来重新编辑脚本，使用vim首先查看文件格式：<br>
在底行模式下输入 set ff，回车可以看到文件格式为dos。<br>
修改文件格式为 unix即可。<br>
底行模式下输入 set ff=unix</p>
<p>您也可以使用dos2unix命令将脚本的换行符转换为Linux格式。在Linux终端中运行以下命令即可：</p>
<p>dos2unix start.sh<br>
这个命令将会将start.sh文件中的换行符从Windows格式转换为Linux格式。转换完成后，您应该能够成功运行脚本了。</p>
<p>-bash: dos2unix: 未找到命令</p>
<p>如果您在Linux终端中运行dos2unix命令时出现“未找到命令”的错误，这意味着您的系统上没有安装dos2unix工具。</p>
<p>要解决这个问题，您可以使用包管理器安装dos2unix工具。以下是一些常见的Linux发行版和包管理器的安装方法：</p>
<p>Ubuntu / Debian：在终端中运行 sudo apt-get install dos2unix<br>
CentOS / Fedora：在终端中运行 sudo yum install dos2unix<br>
Arch Linux：在终端中运行 sudo pacman -S dos2unix<br>
macOS：使用Homebrew，在终端中运行 brew install dos2unix<br>
安装完成后，重新运行dos2unix命令即可。如果仍然遇到问题，请检查您的PATH环境变量是否包含dos2unix命令的路径。</p>
<p>dos2unix: converting file start.sh to Unix format ...</p>
<p>这个输出表示dos2unix命令已经成功将start.sh文件的换行符从Windows格式转换为Unix格式。现在，您应该能够在Linux终端中运行start.sh脚本了。如果您仍然遇到问题，请确保脚本文件具有可执行权限。您可以使用以下命令添加可执行权限：</p>
<p>chmod +x start.sh<br>
这个命令将会将start.sh文件设置为可执行。现在，您可以在终端中运行./start.sh命令来执行脚本了。</p>
<p>另一个方法<br>
用sed命令进行全局替换</p>
<p>sed 's/\r//' -i start.sh<br>
也可以用 vim 来重新编辑脚本，使用vim首先查看文件格式：</p>
<p>在底行模式下输入 set ff，回车可以看到文件格式为dos。</p>
<p>修改文件格式为 unix即可。<br>
底行模式下输入 set ff=unix</p>
<p>保存退出即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux,SSH密钥创建及登录]]></title>
        <id>https://blog.zyh.info/post/linuxssh-mi-yao-chuang-jian-ji-deng-lu/</id>
        <link href="https://blog.zyh.info/post/linuxssh-mi-yao-chuang-jian-ji-deng-lu/">
        </link>
        <updated>2023-04-10T08:41:23.000Z</updated>
        <content type="html"><![CDATA[<p>cd /root/.ssh</p>
<p>执行ssh-keygen命令创建密钥对，</p>
<p>ssh-keygen -t rsa -b 4096</p>
<p>-b 参数，指定长度，也可以不加-b参数，直接使用ssh-keygen -t rsa</p>
<p>执行命令的过程中是会提示输入密钥的密码</p>
<p>不需要密码直接回车</p>
<p>密钥生成后会在当前目录下多出两个文件，id_rsa和id_rsa.pub，</p>
<p>id_rsa是私钥，id_rsa.pub这个是公钥，</p>
<p>将上面生成的公钥id_rsa.pub追加到authorized_keys文件中：</p>
<p>cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys<br>
双尖括号&gt;&gt;表示像向文件中追加<br>
单尖括号&gt;表示将文件内容全部替换掉</p>
<p>接下来测试密钥可以正常登录后，禁用 root 帐号<br>
sudo passwd -l root</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用Watch­tower自动更新Docker镜像与容器]]></title>
        <id>https://blog.zyh.info/post/zi-dong-geng-xin-docker-jing-xiang-yu-rong-qi/</id>
        <link href="https://blog.zyh.info/post/zi-dong-geng-xin-docker-jing-xiang-yu-rong-qi/">
        </link>
        <updated>2023-04-06T04:01:16.000Z</updated>
        <content type="html"><![CDATA[<p>自动清除旧镜像</p>
<p>docker run -d <br>
--name watchtower <br>
--restart unless-stopped <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower <br>
--cleanup<br>
--cleanup 选项可以简写为 -c：</p>
<p>docker run -d <br>
--name watchtower <br>
--restart unless-stopped <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower -c<br>
选择性自动更新</p>
<p>假设我们只想更新 nginx、redis 这两个容器，我们可以把容器名称追加到启动命令的最后面，就像下面这个例子：</p>
<p>docker run -d <br>
--name watchtower <br>
--restart unless-stopped <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower -c <br>
nginx redis</p>
<p>把需要更新的容器名称写在启动命令中不利于管理，于是建立一个更新列表文件。</p>
<p>$ cat ~/.watchtower.list<br>
aria2-pro<br>
unlockmusic<br>
mtg<br>
...<br>
通过变量的方式去调用这个列表：</p>
<p>docker run -d <br>
--name watchtower <br>
--restart unless-stopped <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower -c <br>
$(cat ~/.watchtower.list)<br>
这样只需要调整列表后删除 Watch­tower 容器并重新执行上面的命令重新启动 Watch­tower 即可。</p>
<p>设置自动更新检查频率</p>
<p>--interval, -i - 设置更新检测时间间隔，单位为秒。比如每隔 1 个小时检查一次更新：<br>
docker run -d <br>
--name watchtower <br>
--restart unless-stopped <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower -c <br>
--interval 3600<br>
--schedule, -s - 设置定时检测更新时间。格式为 6 字段 Cron 表达式，而非传统的 5 个字段。比如每天凌晨 2 点检查一次更新：<br>
docker run -d <br>
--name watchtower <br>
--restart unless-stopped <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower -c <br>
--schedule &quot;0 2 * * * *&quot;</p>
<p>手动更新</p>
<p>docker run --rm <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower -c <br>
--run-once <br>
aria2-pro<br>
--run-once 可以简写为 -R：</p>
<p>docker run --rm <br>
-v /var/run/docker.sock:/var/run/docker.sock <br>
containrrr/watchtower -cR <br>
aria2-pro</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CentOS7端口被占用的解决办法]]></title>
        <id>https://blog.zyh.info/post/centos7-duan-kou-bei-zhan-yong-de-jie-jue-ban-fa/</id>
        <link href="https://blog.zyh.info/post/centos7-duan-kou-bei-zhan-yong-de-jie-jue-ban-fa/">
        </link>
        <updated>2023-03-28T04:45:40.000Z</updated>
        <content type="html"><![CDATA[<p>1、根据端口号得到其占用的进程的详细信息</p>
<p>netstat -tlnp|grep 80<br>
tcp        0      0 192.168.33.10:80            0.0.0.0:*                   LISTEN      5014/httpd<br>
tcp        0      0 0.0.0.0:48054               0.0.0.0:*                   LISTEN      5386/java</p>
<p>2、一次性的清除占用80端口的程序</p>
<p>lsof -i :80|grep -v &quot;PID&quot;|awk '{print &quot;kill -9&quot;,$2}'|sh</p>
<p>3、手工终止进程的运行</p>
<p>kill 5014<br>
如果终止不了，可以强制终止<br>
kill -9 5014</p>
<p>4，查看已经开放的端口：</p>
<p>firewall-cmd --list-ports</p>
<p>5，开启端口</p>
<p>firewall-cmd --zone=public --add-port=80/tcp --permanent</p>
<p>命令含义：</p>
<p>–zone #作用域</p>
<p>–add-port=80/tcp #添加端口，格式为：端口/通讯协议</p>
<p>–permanent #永久生效，没有此参数重启后失效</p>
<p>6，防火墙设置</p>
<p>firewall-cmd --reload #重启firewall</p>
<p>systemctl stop firewalld.service #停止firewall</p>
<p>systemctl disable firewalld.service #禁止firewall开机启动</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[nginx做反代后，访问变成下载]]></title>
        <id>https://blog.zyh.info/post/nginx-zuo-fan-dai-hou-fang-wen-bian-cheng-xia-zai/</id>
        <link href="https://blog.zyh.info/post/nginx-zuo-fan-dai-hou-fang-wen-bian-cheng-xia-zai/">
        </link>
        <updated>2023-03-22T11:51:48.000Z</updated>
        <content type="html"><![CDATA[<p>网站配置选项中的“php版本”变成纯静态，</p>
<p>修改为自己的php版本，</p>
<p>然后重启nginx即可。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node v16.18.1安装教程]]></title>
        <id>https://blog.zyh.info/post/node-v16181-an-zhuang-jiao-cheng/</id>
        <link href="https://blog.zyh.info/post/node-v16181-an-zhuang-jiao-cheng/">
        </link>
        <updated>2023-03-22T11:49:57.000Z</updated>
        <content type="html"><![CDATA[<p>wget https://nodejs.org/dist/v16.18.1/node-v16.18.1-linux-x64.tar.xz</p>
<p>tar xf node-v16.18.1-linux-x64.tar.xz</p>
<p>mkdir /usr/local/lib/node</p>
<p>mv node-v16.18.1-linux-x64 /usr/local/lib/node/nodejs</p>
<p>设置环境变量</p>
<p>sudo vim /etc/profile</p>
<p>输入 i 即可对文件进行编辑。</p>
<p>在文件底部添加环境变量：</p>
<p>export NODEJS_HOME=/usr/local/lib/node/nodejs<br>
export PATH=<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>O</mi><mi>D</mi><mi>E</mi><mi>J</mi><msub><mi>S</mi><mi>H</mi></msub><mi>O</mi><mi>M</mi><mi>E</mi><mi mathvariant="normal">/</mi><mi>b</mi><mi>i</mi><mi>n</mi><mo>:</mo></mrow><annotation encoding="application/x-tex">NODEJS_HOME/bin:</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.09618em;">J</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord">/</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span></span></span></span>PATH</p>
<p>执行命令</p>
<p>按esc健<br>
输入冒号:<br>
输入wq<br>
回车<br>
保存并退出。</p>
<p>刷新修改<br>
source /etc/profile</p>
<p>安装完成，查看版本号<br>
node版本号：<br>
node -v</p>
<p>npm版本号：<br>
npm -v</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cockpit的开启与关闭]]></title>
        <id>https://blog.zyh.info/post/cockpit-de-kai-qi-yu-guan-bi/</id>
        <link href="https://blog.zyh.info/post/cockpit-de-kai-qi-yu-guan-bi/">
        </link>
        <updated>2023-03-22T11:49:37.000Z</updated>
        <content type="html"><![CDATA[<p>Cockpit 是红帽开发的网页版图像化服务管理工具，</p>
<p>开启命令<br>
systemctl start cockpit</p>
<p>开启后可以通过域名:9090来访问，</p>
<p>停止cockpit服务</p>
<p>systemctl stop cockpit.socket</p>
<p>修改默认端口</p>
<p>默认cockpit使用的是9090端口</p>
<p>sed -i s#9090#9290# /usr/lib/systemd/system/cockpit.socket</p>
<p>修改完成后重启服务并添加开机自启</p>
<p>systemctl restart cockpit.socket<br>
systemctl enable cockpit.socket</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一键V2Ray脚本]]></title>
        <id>https://blog.zyh.info/post/yi-jian-v2ray-jiao-ben/</id>
        <link href="https://blog.zyh.info/post/yi-jian-v2ray-jiao-ben/">
        </link>
        <updated>2023-02-24T11:04:59.000Z</updated>
        <content type="html"><![CDATA[<p>一键V2Ray脚本，安装简单方便，自动关闭防火墙，自动安装BBR加速</p>
<p>安装命令：</p>
<p>一键安装，</p>
<p>bash &lt;(curl -s -L https://raw.githubusercontent.com/xyz690/v2ray/master/go.sh)</p>
<p>自定义安装，</p>
<p>bash &lt;(curl -s -L https://raw.githubusercontent.com/xyz690/v2ray/master/install.sh)</p>
<p>相关命令：</p>
<p>v2ray info 查看 V2Ray 配置信息<br>
v2ray config 修改 V2Ray 配置<br>
v2ray link 生成 V2Ray 配置文件链接<br>
v2ray infolink 生成 V2Ray 配置信息链接<br>
v2ray qr 生成 V2Ray 配置二维码链接<br>
v2ray ss 修改 Shadowsocks 配置<br>
v2ray ssinfo 查看 Shadowsocks 配置信息<br>
v2ray ssqr 生成 Shadowsocks 配置二维码链接<br>
v2ray status 查看 V2Ray 运行状态<br>
v2ray start 启动 V2Ray<br>
v2ray stop 停止 V2Ray<br>
v2ray restart 重启 V2Ray<br>
v2ray log 查看 V2Ray 运行日志<br>
v2ray update 更新 V2Ray<br>
v2ray update.sh 更新 V2Ray 管理脚本<br>
v2ray uninstall 卸载 V2Ray</p>
<p>vmess协议配置</p>
<p>查看配置文件</p>
<p>cat /etc/v2ray/config.json</p>
<p>注意本教程：</p>
<p>Network(传输协议)： kcp</p>
<p>type(伪装类型)：dtls</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[消除win7系统中Edge浏览器【要获取将来的 Microsoft Edge 更新，需要 Windows 10 或更高版本】的提示]]></title>
        <id>https://blog.zyh.info/post/xiao-chu-win7-xi-tong-zhong-edge-liu-lan-qi-yao-huo-qu-jiang-lai-de-microsoft-edge-geng-xin-xu-yao-windows-10-huo-geng-gao-ban-ben-de-ti-shi/</id>
        <link href="https://blog.zyh.info/post/xiao-chu-win7-xi-tong-zhong-edge-liu-lan-qi-yao-huo-qu-jiang-lai-de-microsoft-edge-geng-xin-xu-yao-windows-10-huo-geng-gao-ban-ben-de-ti-shi/">
        </link>
        <updated>2022-12-12T12:50:39.000Z</updated>
        <content type="html"><![CDATA[<p>打开注册表，进入如下路径</p>
<p>HKEY_CURRENT_USER\Software\Policies\Microsoft\</p>
<p>在Microsoft下新建一个项目Edge，再在Edge下新建一个DWORD-32位值（取名为SuppressUnsupportedOSWarning），再双击该条目，修改数据值为1（十六进制），</p>
<p>重启电脑。</p>
<p>chrome浏览器的消除方法同理：<br>
进入如下路径</p>
<p>HKEY_CURRENT_USER\Software\Policies\</p>
<p>在Policies下新建一个项目Google，再在Google下新建一个项目为Chrome，再在Chrome下新建DWORD-32位值（取名为SuppressUnsupportedOSWarning），再双击该条目，修改数据值为1（十六进制），</p>
<p>重启电脑。</p>
]]></content>
    </entry>
</feed>